Terminals which are not used

   DOT


Grammar

    0 $accept: translation_unit $end

    1 translation_unit: definition_or_statement
    2                 | translation_unit definition_or_statement

    3 definition_or_statement: function_definition
    4                        | statement

    5 type_specifier: BOOLEAN_T
    6               | INT_T
    7               | DOUBLE_T
    8               | STRING_T

    9 function_definition: type_specifier IDENTIFIER LP parameter_list RP block
   10                    | type_specifier IDENTIFIER LP RP block
   11                    | type_specifier IDENTIFIER LP parameter_list RP SEMICOLON
   12                    | type_specifier IDENTIFIER LP RP SEMICOLON

   13 parameter_list: type_specifier IDENTIFIER
   14               | parameter_list COMMA type_specifier IDENTIFIER

   15 argument_list: assignment_expression
   16              | argument_list COMMA assignment_expression

   17 statement_list: statement
   18               | statement_list statement

   19 expression: assignment_expression
   20           | expression COMMA assignment_expression

   21 assignment_expression: logical_or_expression
   22                      | postfix_expression assignment_operator assignment_expression

   23 assignment_operator: ASSIGN_T
   24                    | ADD_ASSIGN_T
   25                    | SUB_ASSIGN_T
   26                    | MUL_ASSIGN_T
   27                    | DIV_ASSIGN_T
   28                    | MOD_ASSIGN_T

   29 logical_or_expression: logical_and_expression
   30                      | logical_or_expression LOGICAL_OR logical_and_expression

   31 logical_and_expression: equality_expression
   32                       | logical_and_expression LOGICAL_AND equality_expression

   33 equality_expression: relational_expression
   34                    | equality_expression EQ relational_expression
   35                    | equality_expression NE relational_expression

   36 relational_expression: additive_expression
   37                      | relational_expression GT additive_expression
   38                      | relational_expression GE additive_expression
   39                      | relational_expression LT additive_expression
   40                      | relational_expression LE additive_expression

   41 additive_expression: multiplicative_expression
   42                    | additive_expression ADD multiplicative_expression
   43                    | additive_expression SUB multiplicative_expression

   44 multiplicative_expression: unary_expression
   45                          | multiplicative_expression MUL unary_expression
   46                          | multiplicative_expression DIV unary_expression
   47                          | multiplicative_expression MOD unary_expression

   48 unary_expression: postfix_expression
   49                 | SUB unary_expression
   50                 | EXCLAMATION unary_expression

   51 postfix_expression: primary_expression
   52                   | postfix_expression LP argument_list RP
   53                   | postfix_expression LP RP
   54                   | postfix_expression INCREMENT
   55                   | postfix_expression DECREMENT

   56 primary_expression: LP expression RP
   57                   | IDENTIFIER
   58                   | INT_LITERAL
   59                   | DOUBLE_LITERAL
   60                   | STRING_LITERAL
   61                   | REGEXP_LITERAL
   62                   | TRUE_T
   63                   | FALSE_T

   64 statement: expression SEMICOLON
   65          | if_statement
   66          | while_statement
   67          | for_statement
   68          | foreach_statement
   69          | return_statement
   70          | break_statement
   71          | continue_statement
   72          | try_statement
   73          | throw_statement
   74          | declaration_statement

   75 if_statement: IF LP expression RP block
   76             | IF LP expression RP block ELSE block
   77             | IF LP expression RP block elsif_list
   78             | IF LP expression RP block elsif_list ELSE block

   79 elsif_list: elsif
   80           | elsif_list elsif

   81 elsif: ELSIF LP expression RP block

   82 label_opt: /* empty */
   83          | IDENTIFIER COLON

   84 while_statement: label_opt WHILE LP expression RP block

   85 for_statement: label_opt FOR LP expression_opt SEMICOLON expression_opt SEMICOLON expression_opt RP block

   86 foreach_statement: label_opt FOREACH LP IDENTIFIER COLON expression RP block

   87 expression_opt: /* empty */
   88               | expression

   89 return_statement: RETURN_T expression_opt SEMICOLON

   90 identifier_opt: /* empty */
   91               | IDENTIFIER

   92 break_statement: BREAK identifier_opt SEMICOLON

   93 continue_statement: CONTINUE identifier_opt SEMICOLON

   94 try_statement: TRY block CATCH LP IDENTIFIER RP block FINALLY block
   95              | TRY block FINALLY block
   96              | TRY block CATCH LP IDENTIFIER RP block

   97 throw_statement: THROW expression SEMICOLON

   98 declaration_statement: type_specifier IDENTIFIER SEMICOLON
   99                      | type_specifier IDENTIFIER ASSIGN_T expression SEMICOLON

  100 @1: /* empty */

  101 block: LC @1 statement_list RC
  102      | LC RC


Terminals, with rules where they appear

$end (0) 0
error (256)
INT_LITERAL (258) 58
DOUBLE_LITERAL (259) 59
STRING_LITERAL (260) 60
REGEXP_LITERAL (261) 61
IDENTIFIER (262) 9 10 11 12 13 14 57 83 86 91 94 96 98 99
IF (263) 75 76 77 78
ELSE (264) 76 78
ELSIF (265) 81
WHILE (266) 84
FOR (267) 85
FOREACH (268) 86
RETURN_T (269) 89
BREAK (270) 92
CONTINUE (271) 93
LP (272) 9 10 11 12 52 53 56 75 76 77 78 81 84 85 86 94 96
RP (273) 9 10 11 12 52 53 56 75 76 77 78 81 84 85 86 94 96
LC (274) 101 102
RC (275) 101 102
SEMICOLON (276) 11 12 64 85 89 92 93 97 98 99
COLON (277) 83 86
COMMA (278) 14 16 20
ASSIGN_T (279) 23 99
LOGICAL_AND (280) 32
LOGICAL_OR (281) 30
EQ (282) 34
NE (283) 35
GT (284) 37
GE (285) 38
LT (286) 39
LE (287) 40
ADD (288) 42
SUB (289) 43 49
MUL (290) 45
DIV (291) 46
MOD (292) 47
TRUE_T (293) 62
FALSE_T (294) 63
EXCLAMATION (295) 50
DOT (296)
ADD_ASSIGN_T (297) 24
SUB_ASSIGN_T (298) 25
MUL_ASSIGN_T (299) 26
DIV_ASSIGN_T (300) 27
MOD_ASSIGN_T (301) 28
INCREMENT (302) 54
DECREMENT (303) 55
TRY (304) 94 95 96
CATCH (305) 94 96
FINALLY (306) 94 95
THROW (307) 97
BOOLEAN_T (308) 5
INT_T (309) 6
DOUBLE_T (310) 7
STRING_T (311) 8


Nonterminals, with rules where they appear

$accept (57)
    on left: 0
translation_unit (58)
    on left: 1 2, on right: 0 2
definition_or_statement (59)
    on left: 3 4, on right: 1 2
type_specifier (60)
    on left: 5 6 7 8, on right: 9 10 11 12 13 14 98 99
function_definition (61)
    on left: 9 10 11 12, on right: 3
parameter_list (62)
    on left: 13 14, on right: 9 11 14
argument_list (63)
    on left: 15 16, on right: 16 52
statement_list (64)
    on left: 17 18, on right: 18 101
expression (65)
    on left: 19 20, on right: 20 56 64 75 76 77 78 81 84 86 88 97 99
assignment_expression (66)
    on left: 21 22, on right: 15 16 19 20 22
assignment_operator (67)
    on left: 23 24 25 26 27 28, on right: 22
logical_or_expression (68)
    on left: 29 30, on right: 21 30
logical_and_expression (69)
    on left: 31 32, on right: 29 30 32
equality_expression (70)
    on left: 33 34 35, on right: 31 32 34 35
relational_expression (71)
    on left: 36 37 38 39 40, on right: 33 34 35 37 38 39 40
additive_expression (72)
    on left: 41 42 43, on right: 36 37 38 39 40 42 43
multiplicative_expression (73)
    on left: 44 45 46 47, on right: 41 42 43 45 46 47
unary_expression (74)
    on left: 48 49 50, on right: 44 45 46 47 49 50
postfix_expression (75)
    on left: 51 52 53 54 55, on right: 22 48 52 53 54 55
primary_expression (76)
    on left: 56 57 58 59 60 61 62 63, on right: 51
statement (77)
    on left: 64 65 66 67 68 69 70 71 72 73 74, on right: 4 17 18
if_statement (78)
    on left: 75 76 77 78, on right: 65
elsif_list (79)
    on left: 79 80, on right: 77 78 80
elsif (80)
    on left: 81, on right: 79 80
label_opt (81)
    on left: 82 83, on right: 84 85 86
while_statement (82)
    on left: 84, on right: 66
for_statement (83)
    on left: 85, on right: 67
foreach_statement (84)
    on left: 86, on right: 68
expression_opt (85)
    on left: 87 88, on right: 85 89
return_statement (86)
    on left: 89, on right: 69
identifier_opt (87)
    on left: 90 91, on right: 92 93
break_statement (88)
    on left: 92, on right: 70
continue_statement (89)
    on left: 93, on right: 71
try_statement (90)
    on left: 94 95 96, on right: 72
throw_statement (91)
    on left: 97, on right: 73
declaration_statement (92)
    on left: 98 99, on right: 74
block (93)
    on left: 101 102, on right: 9 10 75 76 77 78 81 84 85 86 94 95
    96
@1 (94)
    on left: 100, on right: 101


state 0

    0 $accept: . translation_unit $end

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    REGEXP_LITERAL  shift, and go to state 4
    IDENTIFIER      shift, and go to state 5
    IF              shift, and go to state 6
    RETURN_T        shift, and go to state 7
    BREAK           shift, and go to state 8
    CONTINUE        shift, and go to state 9
    LP              shift, and go to state 10
    SUB             shift, and go to state 11
    TRUE_T          shift, and go to state 12
    FALSE_T         shift, and go to state 13
    EXCLAMATION     shift, and go to state 14
    TRY             shift, and go to state 15
    THROW           shift, and go to state 16
    BOOLEAN_T       shift, and go to state 17
    INT_T           shift, and go to state 18
    DOUBLE_T        shift, and go to state 19
    STRING_T        shift, and go to state 20

    $default  reduce using rule 82 (label_opt)

    translation_unit           go to state 21
    definition_or_statement    go to state 22
    type_specifier             go to state 23
    function_definition        go to state 24
    expression                 go to state 25
    assignment_expression      go to state 26
    logical_or_expression      go to state 27
    logical_and_expression     go to state 28
    equality_expression        go to state 29
    relational_expression      go to state 30
    additive_expression        go to state 31
    multiplicative_expression  go to state 32
    unary_expression           go to state 33
    postfix_expression         go to state 34
    primary_expression         go to state 35
    statement                  go to state 36
    if_statement               go to state 37
    label_opt                  go to state 38
    while_statement            go to state 39
    for_statement              go to state 40
    foreach_statement          go to state 41
    return_statement           go to state 42
    break_statement            go to state 43
    continue_statement         go to state 44
    try_statement              go to state 45
    throw_statement            go to state 46
    declaration_statement      go to state 47


state 1

   58 primary_expression: INT_LITERAL .

    $default  reduce using rule 58 (primary_expression)


state 2

   59 primary_expression: DOUBLE_LITERAL .

    $default  reduce using rule 59 (primary_expression)


state 3

   60 primary_expression: STRING_LITERAL .

    $default  reduce using rule 60 (primary_expression)


state 4

   61 primary_expression: REGEXP_LITERAL .

    $default  reduce using rule 61 (primary_expression)


state 5

   57 primary_expression: IDENTIFIER .
   83 label_opt: IDENTIFIER . COLON

    COLON  shift, and go to state 48

    $default  reduce using rule 57 (primary_expression)


state 6

   75 if_statement: IF . LP expression RP block
   76             | IF . LP expression RP block ELSE block
   77             | IF . LP expression RP block elsif_list
   78             | IF . LP expression RP block elsif_list ELSE block

    LP  shift, and go to state 49


state 7

   89 return_statement: RETURN_T . expression_opt SEMICOLON

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    REGEXP_LITERAL  shift, and go to state 4
    IDENTIFIER      shift, and go to state 50
    LP              shift, and go to state 10
    SUB             shift, and go to state 11
    TRUE_T          shift, and go to state 12
    FALSE_T         shift, and go to state 13
    EXCLAMATION     shift, and go to state 14

    $default  reduce using rule 87 (expression_opt)

    expression                 go to state 51
    assignment_expression      go to state 26
    logical_or_expression      go to state 27
    logical_and_expression     go to state 28
    equality_expression        go to state 29
    relational_expression      go to state 30
    additive_expression        go to state 31
    multiplicative_expression  go to state 32
    unary_expression           go to state 33
    postfix_expression         go to state 34
    primary_expression         go to state 35
    expression_opt             go to state 52


state 8

   92 break_statement: BREAK . identifier_opt SEMICOLON

    IDENTIFIER  shift, and go to state 53

    $default  reduce using rule 90 (identifier_opt)

    identifier_opt  go to state 54


state 9

   93 continue_statement: CONTINUE . identifier_opt SEMICOLON

    IDENTIFIER  shift, and go to state 53

    $default  reduce using rule 90 (identifier_opt)

    identifier_opt  go to state 55


state 10

   56 primary_expression: LP . expression RP

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    REGEXP_LITERAL  shift, and go to state 4
    IDENTIFIER      shift, and go to state 50
    LP              shift, and go to state 10
    SUB             shift, and go to state 11
    TRUE_T          shift, and go to state 12
    FALSE_T         shift, and go to state 13
    EXCLAMATION     shift, and go to state 14

    expression                 go to state 56
    assignment_expression      go to state 26
    logical_or_expression      go to state 27
    logical_and_expression     go to state 28
    equality_expression        go to state 29
    relational_expression      go to state 30
    additive_expression        go to state 31
    multiplicative_expression  go to state 32
    unary_expression           go to state 33
    postfix_expression         go to state 34
    primary_expression         go to state 35


state 11

   49 unary_expression: SUB . unary_expression

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    REGEXP_LITERAL  shift, and go to state 4
    IDENTIFIER      shift, and go to state 50
    LP              shift, and go to state 10
    SUB             shift, and go to state 11
    TRUE_T          shift, and go to state 12
    FALSE_T         shift, and go to state 13
    EXCLAMATION     shift, and go to state 14

    unary_expression    go to state 57
    postfix_expression  go to state 58
    primary_expression  go to state 35


state 12

   62 primary_expression: TRUE_T .

    $default  reduce using rule 62 (primary_expression)


state 13

   63 primary_expression: FALSE_T .

    $default  reduce using rule 63 (primary_expression)


state 14

   50 unary_expression: EXCLAMATION . unary_expression

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    REGEXP_LITERAL  shift, and go to state 4
    IDENTIFIER      shift, and go to state 50
    LP              shift, and go to state 10
    SUB             shift, and go to state 11
    TRUE_T          shift, and go to state 12
    FALSE_T         shift, and go to state 13
    EXCLAMATION     shift, and go to state 14

    unary_expression    go to state 59
    postfix_expression  go to state 58
    primary_expression  go to state 35


state 15

   94 try_statement: TRY . block CATCH LP IDENTIFIER RP block FINALLY block
   95              | TRY . block FINALLY block
   96              | TRY . block CATCH LP IDENTIFIER RP block

    LC  shift, and go to state 60

    block  go to state 61


state 16

   97 throw_statement: THROW . expression SEMICOLON

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    REGEXP_LITERAL  shift, and go to state 4
    IDENTIFIER      shift, and go to state 50
    LP              shift, and go to state 10
    SUB             shift, and go to state 11
    TRUE_T          shift, and go to state 12
    FALSE_T         shift, and go to state 13
    EXCLAMATION     shift, and go to state 14

    expression                 go to state 62
    assignment_expression      go to state 26
    logical_or_expression      go to state 27
    logical_and_expression     go to state 28
    equality_expression        go to state 29
    relational_expression      go to state 30
    additive_expression        go to state 31
    multiplicative_expression  go to state 32
    unary_expression           go to state 33
    postfix_expression         go to state 34
    primary_expression         go to state 35


state 17

    5 type_specifier: BOOLEAN_T .

    $default  reduce using rule 5 (type_specifier)


state 18

    6 type_specifier: INT_T .

    $default  reduce using rule 6 (type_specifier)


state 19

    7 type_specifier: DOUBLE_T .

    $default  reduce using rule 7 (type_specifier)


state 20

    8 type_specifier: STRING_T .

    $default  reduce using rule 8 (type_specifier)


state 21

    0 $accept: translation_unit . $end
    2 translation_unit: translation_unit . definition_or_statement

    $end            shift, and go to state 63
    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    REGEXP_LITERAL  shift, and go to state 4
    IDENTIFIER      shift, and go to state 5
    IF              shift, and go to state 6
    RETURN_T        shift, and go to state 7
    BREAK           shift, and go to state 8
    CONTINUE        shift, and go to state 9
    LP              shift, and go to state 10
    SUB             shift, and go to state 11
    TRUE_T          shift, and go to state 12
    FALSE_T         shift, and go to state 13
    EXCLAMATION     shift, and go to state 14
    TRY             shift, and go to state 15
    THROW           shift, and go to state 16
    BOOLEAN_T       shift, and go to state 17
    INT_T           shift, and go to state 18
    DOUBLE_T        shift, and go to state 19
    STRING_T        shift, and go to state 20

    $default  reduce using rule 82 (label_opt)

    definition_or_statement    go to state 64
    type_specifier             go to state 23
    function_definition        go to state 24
    expression                 go to state 25
    assignment_expression      go to state 26
    logical_or_expression      go to state 27
    logical_and_expression     go to state 28
    equality_expression        go to state 29
    relational_expression      go to state 30
    additive_expression        go to state 31
    multiplicative_expression  go to state 32
    unary_expression           go to state 33
    postfix_expression         go to state 34
    primary_expression         go to state 35
    statement                  go to state 36
    if_statement               go to state 37
    label_opt                  go to state 38
    while_statement            go to state 39
    for_statement              go to state 40
    foreach_statement          go to state 41
    return_statement           go to state 42
    break_statement            go to state 43
    continue_statement         go to state 44
    try_statement              go to state 45
    throw_statement            go to state 46
    declaration_statement      go to state 47


state 22

    1 translation_unit: definition_or_statement .

    $default  reduce using rule 1 (translation_unit)


state 23

    9 function_definition: type_specifier . IDENTIFIER LP parameter_list RP block
   10                    | type_specifier . IDENTIFIER LP RP block
   11                    | type_specifier . IDENTIFIER LP parameter_list RP SEMICOLON
   12                    | type_specifier . IDENTIFIER LP RP SEMICOLON
   98 declaration_statement: type_specifier . IDENTIFIER SEMICOLON
   99                      | type_specifier . IDENTIFIER ASSIGN_T expression SEMICOLON

    IDENTIFIER  shift, and go to state 65


state 24

    3 definition_or_statement: function_definition .

    $default  reduce using rule 3 (definition_or_statement)


state 25

   20 expression: expression . COMMA assignment_expression
   64 statement: expression . SEMICOLON

    SEMICOLON  shift, and go to state 66
    COMMA      shift, and go to state 67


state 26

   19 expression: assignment_expression .

    $default  reduce using rule 19 (expression)


state 27

   21 assignment_expression: logical_or_expression .
   30 logical_or_expression: logical_or_expression . LOGICAL_OR logical_and_expression

    LOGICAL_OR  shift, and go to state 68

    $default  reduce using rule 21 (assignment_expression)


state 28

   29 logical_or_expression: logical_and_expression .
   32 logical_and_expression: logical_and_expression . LOGICAL_AND equality_expression

    LOGICAL_AND  shift, and go to state 69

    $default  reduce using rule 29 (logical_or_expression)


state 29

   31 logical_and_expression: equality_expression .
   34 equality_expression: equality_expression . EQ relational_expression
   35                    | equality_expression . NE relational_expression

    EQ  shift, and go to state 70
    NE  shift, and go to state 71

    $default  reduce using rule 31 (logical_and_expression)


state 30

   33 equality_expression: relational_expression .
   37 relational_expression: relational_expression . GT additive_expression
   38                      | relational_expression . GE additive_expression
   39                      | relational_expression . LT additive_expression
   40                      | relational_expression . LE additive_expression

    GT  shift, and go to state 72
    GE  shift, and go to state 73
    LT  shift, and go to state 74
    LE  shift, and go to state 75

    $default  reduce using rule 33 (equality_expression)


state 31

   36 relational_expression: additive_expression .
   42 additive_expression: additive_expression . ADD multiplicative_expression
   43                    | additive_expression . SUB multiplicative_expression

    ADD  shift, and go to state 76
    SUB  shift, and go to state 77

    $default  reduce using rule 36 (relational_expression)


state 32

   41 additive_expression: multiplicative_expression .
   45 multiplicative_expression: multiplicative_expression . MUL unary_expression
   46                          | multiplicative_expression . DIV unary_expression
   47                          | multiplicative_expression . MOD unary_expression

    MUL  shift, and go to state 78
    DIV  shift, and go to state 79
    MOD  shift, and go to state 80

    $default  reduce using rule 41 (additive_expression)


state 33

   44 multiplicative_expression: unary_expression .

    $default  reduce using rule 44 (multiplicative_expression)


state 34

   22 assignment_expression: postfix_expression . assignment_operator assignment_expression
   48 unary_expression: postfix_expression .
   52 postfix_expression: postfix_expression . LP argument_list RP
   53                   | postfix_expression . LP RP
   54                   | postfix_expression . INCREMENT
   55                   | postfix_expression . DECREMENT

    LP            shift, and go to state 81
    ASSIGN_T      shift, and go to state 82
    ADD_ASSIGN_T  shift, and go to state 83
    SUB_ASSIGN_T  shift, and go to state 84
    MUL_ASSIGN_T  shift, and go to state 85
    DIV_ASSIGN_T  shift, and go to state 86
    MOD_ASSIGN_T  shift, and go to state 87
    INCREMENT     shift, and go to state 88
    DECREMENT     shift, and go to state 89

    $default  reduce using rule 48 (unary_expression)

    assignment_operator  go to state 90


state 35

   51 postfix_expression: primary_expression .

    $default  reduce using rule 51 (postfix_expression)


state 36

    4 definition_or_statement: statement .

    $default  reduce using rule 4 (definition_or_statement)


state 37

   65 statement: if_statement .

    $default  reduce using rule 65 (statement)


state 38

   84 while_statement: label_opt . WHILE LP expression RP block
   85 for_statement: label_opt . FOR LP expression_opt SEMICOLON expression_opt SEMICOLON expression_opt RP block
   86 foreach_statement: label_opt . FOREACH LP IDENTIFIER COLON expression RP block

    WHILE    shift, and go to state 91
    FOR      shift, and go to state 92
    FOREACH  shift, and go to state 93


state 39

   66 statement: while_statement .

    $default  reduce using rule 66 (statement)


state 40

   67 statement: for_statement .

    $default  reduce using rule 67 (statement)


state 41

   68 statement: foreach_statement .

    $default  reduce using rule 68 (statement)


state 42

   69 statement: return_statement .

    $default  reduce using rule 69 (statement)


state 43

   70 statement: break_statement .

    $default  reduce using rule 70 (statement)


state 44

   71 statement: continue_statement .

    $default  reduce using rule 71 (statement)


state 45

   72 statement: try_statement .

    $default  reduce using rule 72 (statement)


state 46

   73 statement: throw_statement .

    $default  reduce using rule 73 (statement)


state 47

   74 statement: declaration_statement .

    $default  reduce using rule 74 (statement)


state 48

   83 label_opt: IDENTIFIER COLON .

    $default  reduce using rule 83 (label_opt)


state 49

   75 if_statement: IF LP . expression RP block
   76             | IF LP . expression RP block ELSE block
   77             | IF LP . expression RP block elsif_list
   78             | IF LP . expression RP block elsif_list ELSE block

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    REGEXP_LITERAL  shift, and go to state 4
    IDENTIFIER      shift, and go to state 50
    LP              shift, and go to state 10
    SUB             shift, and go to state 11
    TRUE_T          shift, and go to state 12
    FALSE_T         shift, and go to state 13
    EXCLAMATION     shift, and go to state 14

    expression                 go to state 94
    assignment_expression      go to state 26
    logical_or_expression      go to state 27
    logical_and_expression     go to state 28
    equality_expression        go to state 29
    relational_expression      go to state 30
    additive_expression        go to state 31
    multiplicative_expression  go to state 32
    unary_expression           go to state 33
    postfix_expression         go to state 34
    primary_expression         go to state 35


state 50

   57 primary_expression: IDENTIFIER .

    $default  reduce using rule 57 (primary_expression)


state 51

   20 expression: expression . COMMA assignment_expression
   88 expression_opt: expression .

    COMMA  shift, and go to state 67

    $default  reduce using rule 88 (expression_opt)


state 52

   89 return_statement: RETURN_T expression_opt . SEMICOLON

    SEMICOLON  shift, and go to state 95


state 53

   91 identifier_opt: IDENTIFIER .

    $default  reduce using rule 91 (identifier_opt)


state 54

   92 break_statement: BREAK identifier_opt . SEMICOLON

    SEMICOLON  shift, and go to state 96


state 55

   93 continue_statement: CONTINUE identifier_opt . SEMICOLON

    SEMICOLON  shift, and go to state 97


state 56

   20 expression: expression . COMMA assignment_expression
   56 primary_expression: LP expression . RP

    RP     shift, and go to state 98
    COMMA  shift, and go to state 67


state 57

   49 unary_expression: SUB unary_expression .

    $default  reduce using rule 49 (unary_expression)


state 58

   48 unary_expression: postfix_expression .
   52 postfix_expression: postfix_expression . LP argument_list RP
   53                   | postfix_expression . LP RP
   54                   | postfix_expression . INCREMENT
   55                   | postfix_expression . DECREMENT

    LP         shift, and go to state 81
    INCREMENT  shift, and go to state 88
    DECREMENT  shift, and go to state 89

    $default  reduce using rule 48 (unary_expression)


state 59

   50 unary_expression: EXCLAMATION unary_expression .

    $default  reduce using rule 50 (unary_expression)


state 60

  101 block: LC . @1 statement_list RC
  102      | LC . RC

    RC  shift, and go to state 99

    $default  reduce using rule 100 (@1)

    @1  go to state 100


state 61

   94 try_statement: TRY block . CATCH LP IDENTIFIER RP block FINALLY block
   95              | TRY block . FINALLY block
   96              | TRY block . CATCH LP IDENTIFIER RP block

    CATCH    shift, and go to state 101
    FINALLY  shift, and go to state 102


state 62

   20 expression: expression . COMMA assignment_expression
   97 throw_statement: THROW expression . SEMICOLON

    SEMICOLON  shift, and go to state 103
    COMMA      shift, and go to state 67


state 63

    0 $accept: translation_unit $end .

    $default  accept


state 64

    2 translation_unit: translation_unit definition_or_statement .

    $default  reduce using rule 2 (translation_unit)


state 65

    9 function_definition: type_specifier IDENTIFIER . LP parameter_list RP block
   10                    | type_specifier IDENTIFIER . LP RP block
   11                    | type_specifier IDENTIFIER . LP parameter_list RP SEMICOLON
   12                    | type_specifier IDENTIFIER . LP RP SEMICOLON
   98 declaration_statement: type_specifier IDENTIFIER . SEMICOLON
   99                      | type_specifier IDENTIFIER . ASSIGN_T expression SEMICOLON

    LP         shift, and go to state 104
    SEMICOLON  shift, and go to state 105
    ASSIGN_T   shift, and go to state 106


state 66

   64 statement: expression SEMICOLON .

    $default  reduce using rule 64 (statement)


state 67

   20 expression: expression COMMA . assignment_expression

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    REGEXP_LITERAL  shift, and go to state 4
    IDENTIFIER      shift, and go to state 50
    LP              shift, and go to state 10
    SUB             shift, and go to state 11
    TRUE_T          shift, and go to state 12
    FALSE_T         shift, and go to state 13
    EXCLAMATION     shift, and go to state 14

    assignment_expression      go to state 107
    logical_or_expression      go to state 27
    logical_and_expression     go to state 28
    equality_expression        go to state 29
    relational_expression      go to state 30
    additive_expression        go to state 31
    multiplicative_expression  go to state 32
    unary_expression           go to state 33
    postfix_expression         go to state 34
    primary_expression         go to state 35


state 68

   30 logical_or_expression: logical_or_expression LOGICAL_OR . logical_and_expression

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    REGEXP_LITERAL  shift, and go to state 4
    IDENTIFIER      shift, and go to state 50
    LP              shift, and go to state 10
    SUB             shift, and go to state 11
    TRUE_T          shift, and go to state 12
    FALSE_T         shift, and go to state 13
    EXCLAMATION     shift, and go to state 14

    logical_and_expression     go to state 108
    equality_expression        go to state 29
    relational_expression      go to state 30
    additive_expression        go to state 31
    multiplicative_expression  go to state 32
    unary_expression           go to state 33
    postfix_expression         go to state 58
    primary_expression         go to state 35


state 69

   32 logical_and_expression: logical_and_expression LOGICAL_AND . equality_expression

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    REGEXP_LITERAL  shift, and go to state 4
    IDENTIFIER      shift, and go to state 50
    LP              shift, and go to state 10
    SUB             shift, and go to state 11
    TRUE_T          shift, and go to state 12
    FALSE_T         shift, and go to state 13
    EXCLAMATION     shift, and go to state 14

    equality_expression        go to state 109
    relational_expression      go to state 30
    additive_expression        go to state 31
    multiplicative_expression  go to state 32
    unary_expression           go to state 33
    postfix_expression         go to state 58
    primary_expression         go to state 35


state 70

   34 equality_expression: equality_expression EQ . relational_expression

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    REGEXP_LITERAL  shift, and go to state 4
    IDENTIFIER      shift, and go to state 50
    LP              shift, and go to state 10
    SUB             shift, and go to state 11
    TRUE_T          shift, and go to state 12
    FALSE_T         shift, and go to state 13
    EXCLAMATION     shift, and go to state 14

    relational_expression      go to state 110
    additive_expression        go to state 31
    multiplicative_expression  go to state 32
    unary_expression           go to state 33
    postfix_expression         go to state 58
    primary_expression         go to state 35


state 71

   35 equality_expression: equality_expression NE . relational_expression

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    REGEXP_LITERAL  shift, and go to state 4
    IDENTIFIER      shift, and go to state 50
    LP              shift, and go to state 10
    SUB             shift, and go to state 11
    TRUE_T          shift, and go to state 12
    FALSE_T         shift, and go to state 13
    EXCLAMATION     shift, and go to state 14

    relational_expression      go to state 111
    additive_expression        go to state 31
    multiplicative_expression  go to state 32
    unary_expression           go to state 33
    postfix_expression         go to state 58
    primary_expression         go to state 35


state 72

   37 relational_expression: relational_expression GT . additive_expression

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    REGEXP_LITERAL  shift, and go to state 4
    IDENTIFIER      shift, and go to state 50
    LP              shift, and go to state 10
    SUB             shift, and go to state 11
    TRUE_T          shift, and go to state 12
    FALSE_T         shift, and go to state 13
    EXCLAMATION     shift, and go to state 14

    additive_expression        go to state 112
    multiplicative_expression  go to state 32
    unary_expression           go to state 33
    postfix_expression         go to state 58
    primary_expression         go to state 35


state 73

   38 relational_expression: relational_expression GE . additive_expression

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    REGEXP_LITERAL  shift, and go to state 4
    IDENTIFIER      shift, and go to state 50
    LP              shift, and go to state 10
    SUB             shift, and go to state 11
    TRUE_T          shift, and go to state 12
    FALSE_T         shift, and go to state 13
    EXCLAMATION     shift, and go to state 14

    additive_expression        go to state 113
    multiplicative_expression  go to state 32
    unary_expression           go to state 33
    postfix_expression         go to state 58
    primary_expression         go to state 35


state 74

   39 relational_expression: relational_expression LT . additive_expression

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    REGEXP_LITERAL  shift, and go to state 4
    IDENTIFIER      shift, and go to state 50
    LP              shift, and go to state 10
    SUB             shift, and go to state 11
    TRUE_T          shift, and go to state 12
    FALSE_T         shift, and go to state 13
    EXCLAMATION     shift, and go to state 14

    additive_expression        go to state 114
    multiplicative_expression  go to state 32
    unary_expression           go to state 33
    postfix_expression         go to state 58
    primary_expression         go to state 35


state 75

   40 relational_expression: relational_expression LE . additive_expression

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    REGEXP_LITERAL  shift, and go to state 4
    IDENTIFIER      shift, and go to state 50
    LP              shift, and go to state 10
    SUB             shift, and go to state 11
    TRUE_T          shift, and go to state 12
    FALSE_T         shift, and go to state 13
    EXCLAMATION     shift, and go to state 14

    additive_expression        go to state 115
    multiplicative_expression  go to state 32
    unary_expression           go to state 33
    postfix_expression         go to state 58
    primary_expression         go to state 35


state 76

   42 additive_expression: additive_expression ADD . multiplicative_expression

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    REGEXP_LITERAL  shift, and go to state 4
    IDENTIFIER      shift, and go to state 50
    LP              shift, and go to state 10
    SUB             shift, and go to state 11
    TRUE_T          shift, and go to state 12
    FALSE_T         shift, and go to state 13
    EXCLAMATION     shift, and go to state 14

    multiplicative_expression  go to state 116
    unary_expression           go to state 33
    postfix_expression         go to state 58
    primary_expression         go to state 35


state 77

   43 additive_expression: additive_expression SUB . multiplicative_expression

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    REGEXP_LITERAL  shift, and go to state 4
    IDENTIFIER      shift, and go to state 50
    LP              shift, and go to state 10
    SUB             shift, and go to state 11
    TRUE_T          shift, and go to state 12
    FALSE_T         shift, and go to state 13
    EXCLAMATION     shift, and go to state 14

    multiplicative_expression  go to state 117
    unary_expression           go to state 33
    postfix_expression         go to state 58
    primary_expression         go to state 35


state 78

   45 multiplicative_expression: multiplicative_expression MUL . unary_expression

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    REGEXP_LITERAL  shift, and go to state 4
    IDENTIFIER      shift, and go to state 50
    LP              shift, and go to state 10
    SUB             shift, and go to state 11
    TRUE_T          shift, and go to state 12
    FALSE_T         shift, and go to state 13
    EXCLAMATION     shift, and go to state 14

    unary_expression    go to state 118
    postfix_expression  go to state 58
    primary_expression  go to state 35


state 79

   46 multiplicative_expression: multiplicative_expression DIV . unary_expression

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    REGEXP_LITERAL  shift, and go to state 4
    IDENTIFIER      shift, and go to state 50
    LP              shift, and go to state 10
    SUB             shift, and go to state 11
    TRUE_T          shift, and go to state 12
    FALSE_T         shift, and go to state 13
    EXCLAMATION     shift, and go to state 14

    unary_expression    go to state 119
    postfix_expression  go to state 58
    primary_expression  go to state 35


state 80

   47 multiplicative_expression: multiplicative_expression MOD . unary_expression

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    REGEXP_LITERAL  shift, and go to state 4
    IDENTIFIER      shift, and go to state 50
    LP              shift, and go to state 10
    SUB             shift, and go to state 11
    TRUE_T          shift, and go to state 12
    FALSE_T         shift, and go to state 13
    EXCLAMATION     shift, and go to state 14

    unary_expression    go to state 120
    postfix_expression  go to state 58
    primary_expression  go to state 35


state 81

   52 postfix_expression: postfix_expression LP . argument_list RP
   53                   | postfix_expression LP . RP

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    REGEXP_LITERAL  shift, and go to state 4
    IDENTIFIER      shift, and go to state 50
    LP              shift, and go to state 10
    RP              shift, and go to state 121
    SUB             shift, and go to state 11
    TRUE_T          shift, and go to state 12
    FALSE_T         shift, and go to state 13
    EXCLAMATION     shift, and go to state 14

    argument_list              go to state 122
    assignment_expression      go to state 123
    logical_or_expression      go to state 27
    logical_and_expression     go to state 28
    equality_expression        go to state 29
    relational_expression      go to state 30
    additive_expression        go to state 31
    multiplicative_expression  go to state 32
    unary_expression           go to state 33
    postfix_expression         go to state 34
    primary_expression         go to state 35


state 82

   23 assignment_operator: ASSIGN_T .

    $default  reduce using rule 23 (assignment_operator)


state 83

   24 assignment_operator: ADD_ASSIGN_T .

    $default  reduce using rule 24 (assignment_operator)


state 84

   25 assignment_operator: SUB_ASSIGN_T .

    $default  reduce using rule 25 (assignment_operator)


state 85

   26 assignment_operator: MUL_ASSIGN_T .

    $default  reduce using rule 26 (assignment_operator)


state 86

   27 assignment_operator: DIV_ASSIGN_T .

    $default  reduce using rule 27 (assignment_operator)


state 87

   28 assignment_operator: MOD_ASSIGN_T .

    $default  reduce using rule 28 (assignment_operator)


state 88

   54 postfix_expression: postfix_expression INCREMENT .

    $default  reduce using rule 54 (postfix_expression)


state 89

   55 postfix_expression: postfix_expression DECREMENT .

    $default  reduce using rule 55 (postfix_expression)


state 90

   22 assignment_expression: postfix_expression assignment_operator . assignment_expression

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    REGEXP_LITERAL  shift, and go to state 4
    IDENTIFIER      shift, and go to state 50
    LP              shift, and go to state 10
    SUB             shift, and go to state 11
    TRUE_T          shift, and go to state 12
    FALSE_T         shift, and go to state 13
    EXCLAMATION     shift, and go to state 14

    assignment_expression      go to state 124
    logical_or_expression      go to state 27
    logical_and_expression     go to state 28
    equality_expression        go to state 29
    relational_expression      go to state 30
    additive_expression        go to state 31
    multiplicative_expression  go to state 32
    unary_expression           go to state 33
    postfix_expression         go to state 34
    primary_expression         go to state 35


state 91

   84 while_statement: label_opt WHILE . LP expression RP block

    LP  shift, and go to state 125


state 92

   85 for_statement: label_opt FOR . LP expression_opt SEMICOLON expression_opt SEMICOLON expression_opt RP block

    LP  shift, and go to state 126


state 93

   86 foreach_statement: label_opt FOREACH . LP IDENTIFIER COLON expression RP block

    LP  shift, and go to state 127


state 94

   20 expression: expression . COMMA assignment_expression
   75 if_statement: IF LP expression . RP block
   76             | IF LP expression . RP block ELSE block
   77             | IF LP expression . RP block elsif_list
   78             | IF LP expression . RP block elsif_list ELSE block

    RP     shift, and go to state 128
    COMMA  shift, and go to state 67


state 95

   89 return_statement: RETURN_T expression_opt SEMICOLON .

    $default  reduce using rule 89 (return_statement)


state 96

   92 break_statement: BREAK identifier_opt SEMICOLON .

    $default  reduce using rule 92 (break_statement)


state 97

   93 continue_statement: CONTINUE identifier_opt SEMICOLON .

    $default  reduce using rule 93 (continue_statement)


state 98

   56 primary_expression: LP expression RP .

    $default  reduce using rule 56 (primary_expression)


state 99

  102 block: LC RC .

    $default  reduce using rule 102 (block)


state 100

  101 block: LC @1 . statement_list RC

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    REGEXP_LITERAL  shift, and go to state 4
    IDENTIFIER      shift, and go to state 5
    IF              shift, and go to state 6
    RETURN_T        shift, and go to state 7
    BREAK           shift, and go to state 8
    CONTINUE        shift, and go to state 9
    LP              shift, and go to state 10
    SUB             shift, and go to state 11
    TRUE_T          shift, and go to state 12
    FALSE_T         shift, and go to state 13
    EXCLAMATION     shift, and go to state 14
    TRY             shift, and go to state 15
    THROW           shift, and go to state 16
    BOOLEAN_T       shift, and go to state 17
    INT_T           shift, and go to state 18
    DOUBLE_T        shift, and go to state 19
    STRING_T        shift, and go to state 20

    $default  reduce using rule 82 (label_opt)

    type_specifier             go to state 129
    statement_list             go to state 130
    expression                 go to state 25
    assignment_expression      go to state 26
    logical_or_expression      go to state 27
    logical_and_expression     go to state 28
    equality_expression        go to state 29
    relational_expression      go to state 30
    additive_expression        go to state 31
    multiplicative_expression  go to state 32
    unary_expression           go to state 33
    postfix_expression         go to state 34
    primary_expression         go to state 35
    statement                  go to state 131
    if_statement               go to state 37
    label_opt                  go to state 38
    while_statement            go to state 39
    for_statement              go to state 40
    foreach_statement          go to state 41
    return_statement           go to state 42
    break_statement            go to state 43
    continue_statement         go to state 44
    try_statement              go to state 45
    throw_statement            go to state 46
    declaration_statement      go to state 47


state 101

   94 try_statement: TRY block CATCH . LP IDENTIFIER RP block FINALLY block
   96              | TRY block CATCH . LP IDENTIFIER RP block

    LP  shift, and go to state 132


state 102

   95 try_statement: TRY block FINALLY . block

    LC  shift, and go to state 60

    block  go to state 133


state 103

   97 throw_statement: THROW expression SEMICOLON .

    $default  reduce using rule 97 (throw_statement)


state 104

    9 function_definition: type_specifier IDENTIFIER LP . parameter_list RP block
   10                    | type_specifier IDENTIFIER LP . RP block
   11                    | type_specifier IDENTIFIER LP . parameter_list RP SEMICOLON
   12                    | type_specifier IDENTIFIER LP . RP SEMICOLON

    RP         shift, and go to state 134
    BOOLEAN_T  shift, and go to state 17
    INT_T      shift, and go to state 18
    DOUBLE_T   shift, and go to state 19
    STRING_T   shift, and go to state 20

    type_specifier  go to state 135
    parameter_list  go to state 136


state 105

   98 declaration_statement: type_specifier IDENTIFIER SEMICOLON .

    $default  reduce using rule 98 (declaration_statement)


state 106

   99 declaration_statement: type_specifier IDENTIFIER ASSIGN_T . expression SEMICOLON

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    REGEXP_LITERAL  shift, and go to state 4
    IDENTIFIER      shift, and go to state 50
    LP              shift, and go to state 10
    SUB             shift, and go to state 11
    TRUE_T          shift, and go to state 12
    FALSE_T         shift, and go to state 13
    EXCLAMATION     shift, and go to state 14

    expression                 go to state 137
    assignment_expression      go to state 26
    logical_or_expression      go to state 27
    logical_and_expression     go to state 28
    equality_expression        go to state 29
    relational_expression      go to state 30
    additive_expression        go to state 31
    multiplicative_expression  go to state 32
    unary_expression           go to state 33
    postfix_expression         go to state 34
    primary_expression         go to state 35


state 107

   20 expression: expression COMMA assignment_expression .

    $default  reduce using rule 20 (expression)


state 108

   30 logical_or_expression: logical_or_expression LOGICAL_OR logical_and_expression .
   32 logical_and_expression: logical_and_expression . LOGICAL_AND equality_expression

    LOGICAL_AND  shift, and go to state 69

    $default  reduce using rule 30 (logical_or_expression)


state 109

   32 logical_and_expression: logical_and_expression LOGICAL_AND equality_expression .
   34 equality_expression: equality_expression . EQ relational_expression
   35                    | equality_expression . NE relational_expression

    EQ  shift, and go to state 70
    NE  shift, and go to state 71

    $default  reduce using rule 32 (logical_and_expression)


state 110

   34 equality_expression: equality_expression EQ relational_expression .
   37 relational_expression: relational_expression . GT additive_expression
   38                      | relational_expression . GE additive_expression
   39                      | relational_expression . LT additive_expression
   40                      | relational_expression . LE additive_expression

    GT  shift, and go to state 72
    GE  shift, and go to state 73
    LT  shift, and go to state 74
    LE  shift, and go to state 75

    $default  reduce using rule 34 (equality_expression)


state 111

   35 equality_expression: equality_expression NE relational_expression .
   37 relational_expression: relational_expression . GT additive_expression
   38                      | relational_expression . GE additive_expression
   39                      | relational_expression . LT additive_expression
   40                      | relational_expression . LE additive_expression

    GT  shift, and go to state 72
    GE  shift, and go to state 73
    LT  shift, and go to state 74
    LE  shift, and go to state 75

    $default  reduce using rule 35 (equality_expression)


state 112

   37 relational_expression: relational_expression GT additive_expression .
   42 additive_expression: additive_expression . ADD multiplicative_expression
   43                    | additive_expression . SUB multiplicative_expression

    ADD  shift, and go to state 76
    SUB  shift, and go to state 77

    $default  reduce using rule 37 (relational_expression)


state 113

   38 relational_expression: relational_expression GE additive_expression .
   42 additive_expression: additive_expression . ADD multiplicative_expression
   43                    | additive_expression . SUB multiplicative_expression

    ADD  shift, and go to state 76
    SUB  shift, and go to state 77

    $default  reduce using rule 38 (relational_expression)


state 114

   39 relational_expression: relational_expression LT additive_expression .
   42 additive_expression: additive_expression . ADD multiplicative_expression
   43                    | additive_expression . SUB multiplicative_expression

    ADD  shift, and go to state 76
    SUB  shift, and go to state 77

    $default  reduce using rule 39 (relational_expression)


state 115

   40 relational_expression: relational_expression LE additive_expression .
   42 additive_expression: additive_expression . ADD multiplicative_expression
   43                    | additive_expression . SUB multiplicative_expression

    ADD  shift, and go to state 76
    SUB  shift, and go to state 77

    $default  reduce using rule 40 (relational_expression)


state 116

   42 additive_expression: additive_expression ADD multiplicative_expression .
   45 multiplicative_expression: multiplicative_expression . MUL unary_expression
   46                          | multiplicative_expression . DIV unary_expression
   47                          | multiplicative_expression . MOD unary_expression

    MUL  shift, and go to state 78
    DIV  shift, and go to state 79
    MOD  shift, and go to state 80

    $default  reduce using rule 42 (additive_expression)


state 117

   43 additive_expression: additive_expression SUB multiplicative_expression .
   45 multiplicative_expression: multiplicative_expression . MUL unary_expression
   46                          | multiplicative_expression . DIV unary_expression
   47                          | multiplicative_expression . MOD unary_expression

    MUL  shift, and go to state 78
    DIV  shift, and go to state 79
    MOD  shift, and go to state 80

    $default  reduce using rule 43 (additive_expression)


state 118

   45 multiplicative_expression: multiplicative_expression MUL unary_expression .

    $default  reduce using rule 45 (multiplicative_expression)


state 119

   46 multiplicative_expression: multiplicative_expression DIV unary_expression .

    $default  reduce using rule 46 (multiplicative_expression)


state 120

   47 multiplicative_expression: multiplicative_expression MOD unary_expression .

    $default  reduce using rule 47 (multiplicative_expression)


state 121

   53 postfix_expression: postfix_expression LP RP .

    $default  reduce using rule 53 (postfix_expression)


state 122

   16 argument_list: argument_list . COMMA assignment_expression
   52 postfix_expression: postfix_expression LP argument_list . RP

    RP     shift, and go to state 138
    COMMA  shift, and go to state 139


state 123

   15 argument_list: assignment_expression .

    $default  reduce using rule 15 (argument_list)


state 124

   22 assignment_expression: postfix_expression assignment_operator assignment_expression .

    $default  reduce using rule 22 (assignment_expression)


state 125

   84 while_statement: label_opt WHILE LP . expression RP block

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    REGEXP_LITERAL  shift, and go to state 4
    IDENTIFIER      shift, and go to state 50
    LP              shift, and go to state 10
    SUB             shift, and go to state 11
    TRUE_T          shift, and go to state 12
    FALSE_T         shift, and go to state 13
    EXCLAMATION     shift, and go to state 14

    expression                 go to state 140
    assignment_expression      go to state 26
    logical_or_expression      go to state 27
    logical_and_expression     go to state 28
    equality_expression        go to state 29
    relational_expression      go to state 30
    additive_expression        go to state 31
    multiplicative_expression  go to state 32
    unary_expression           go to state 33
    postfix_expression         go to state 34
    primary_expression         go to state 35


state 126

   85 for_statement: label_opt FOR LP . expression_opt SEMICOLON expression_opt SEMICOLON expression_opt RP block

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    REGEXP_LITERAL  shift, and go to state 4
    IDENTIFIER      shift, and go to state 50
    LP              shift, and go to state 10
    SUB             shift, and go to state 11
    TRUE_T          shift, and go to state 12
    FALSE_T         shift, and go to state 13
    EXCLAMATION     shift, and go to state 14

    $default  reduce using rule 87 (expression_opt)

    expression                 go to state 51
    assignment_expression      go to state 26
    logical_or_expression      go to state 27
    logical_and_expression     go to state 28
    equality_expression        go to state 29
    relational_expression      go to state 30
    additive_expression        go to state 31
    multiplicative_expression  go to state 32
    unary_expression           go to state 33
    postfix_expression         go to state 34
    primary_expression         go to state 35
    expression_opt             go to state 141


state 127

   86 foreach_statement: label_opt FOREACH LP . IDENTIFIER COLON expression RP block

    IDENTIFIER  shift, and go to state 142


state 128

   75 if_statement: IF LP expression RP . block
   76             | IF LP expression RP . block ELSE block
   77             | IF LP expression RP . block elsif_list
   78             | IF LP expression RP . block elsif_list ELSE block

    LC  shift, and go to state 60

    block  go to state 143


state 129

   98 declaration_statement: type_specifier . IDENTIFIER SEMICOLON
   99                      | type_specifier . IDENTIFIER ASSIGN_T expression SEMICOLON

    IDENTIFIER  shift, and go to state 144


state 130

   18 statement_list: statement_list . statement
  101 block: LC @1 statement_list . RC

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    REGEXP_LITERAL  shift, and go to state 4
    IDENTIFIER      shift, and go to state 5
    IF              shift, and go to state 6
    RETURN_T        shift, and go to state 7
    BREAK           shift, and go to state 8
    CONTINUE        shift, and go to state 9
    LP              shift, and go to state 10
    RC              shift, and go to state 145
    SUB             shift, and go to state 11
    TRUE_T          shift, and go to state 12
    FALSE_T         shift, and go to state 13
    EXCLAMATION     shift, and go to state 14
    TRY             shift, and go to state 15
    THROW           shift, and go to state 16
    BOOLEAN_T       shift, and go to state 17
    INT_T           shift, and go to state 18
    DOUBLE_T        shift, and go to state 19
    STRING_T        shift, and go to state 20

    $default  reduce using rule 82 (label_opt)

    type_specifier             go to state 129
    expression                 go to state 25
    assignment_expression      go to state 26
    logical_or_expression      go to state 27
    logical_and_expression     go to state 28
    equality_expression        go to state 29
    relational_expression      go to state 30
    additive_expression        go to state 31
    multiplicative_expression  go to state 32
    unary_expression           go to state 33
    postfix_expression         go to state 34
    primary_expression         go to state 35
    statement                  go to state 146
    if_statement               go to state 37
    label_opt                  go to state 38
    while_statement            go to state 39
    for_statement              go to state 40
    foreach_statement          go to state 41
    return_statement           go to state 42
    break_statement            go to state 43
    continue_statement         go to state 44
    try_statement              go to state 45
    throw_statement            go to state 46
    declaration_statement      go to state 47


state 131

   17 statement_list: statement .

    $default  reduce using rule 17 (statement_list)


state 132

   94 try_statement: TRY block CATCH LP . IDENTIFIER RP block FINALLY block
   96              | TRY block CATCH LP . IDENTIFIER RP block

    IDENTIFIER  shift, and go to state 147


state 133

   95 try_statement: TRY block FINALLY block .

    $default  reduce using rule 95 (try_statement)


state 134

   10 function_definition: type_specifier IDENTIFIER LP RP . block
   12                    | type_specifier IDENTIFIER LP RP . SEMICOLON

    LC         shift, and go to state 60
    SEMICOLON  shift, and go to state 148

    block  go to state 149


state 135

   13 parameter_list: type_specifier . IDENTIFIER

    IDENTIFIER  shift, and go to state 150


state 136

    9 function_definition: type_specifier IDENTIFIER LP parameter_list . RP block
   11                    | type_specifier IDENTIFIER LP parameter_list . RP SEMICOLON
   14 parameter_list: parameter_list . COMMA type_specifier IDENTIFIER

    RP     shift, and go to state 151
    COMMA  shift, and go to state 152


state 137

   20 expression: expression . COMMA assignment_expression
   99 declaration_statement: type_specifier IDENTIFIER ASSIGN_T expression . SEMICOLON

    SEMICOLON  shift, and go to state 153
    COMMA      shift, and go to state 67


state 138

   52 postfix_expression: postfix_expression LP argument_list RP .

    $default  reduce using rule 52 (postfix_expression)


state 139

   16 argument_list: argument_list COMMA . assignment_expression

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    REGEXP_LITERAL  shift, and go to state 4
    IDENTIFIER      shift, and go to state 50
    LP              shift, and go to state 10
    SUB             shift, and go to state 11
    TRUE_T          shift, and go to state 12
    FALSE_T         shift, and go to state 13
    EXCLAMATION     shift, and go to state 14

    assignment_expression      go to state 154
    logical_or_expression      go to state 27
    logical_and_expression     go to state 28
    equality_expression        go to state 29
    relational_expression      go to state 30
    additive_expression        go to state 31
    multiplicative_expression  go to state 32
    unary_expression           go to state 33
    postfix_expression         go to state 34
    primary_expression         go to state 35


state 140

   20 expression: expression . COMMA assignment_expression
   84 while_statement: label_opt WHILE LP expression . RP block

    RP     shift, and go to state 155
    COMMA  shift, and go to state 67


state 141

   85 for_statement: label_opt FOR LP expression_opt . SEMICOLON expression_opt SEMICOLON expression_opt RP block

    SEMICOLON  shift, and go to state 156


state 142

   86 foreach_statement: label_opt FOREACH LP IDENTIFIER . COLON expression RP block

    COLON  shift, and go to state 157


state 143

   75 if_statement: IF LP expression RP block .
   76             | IF LP expression RP block . ELSE block
   77             | IF LP expression RP block . elsif_list
   78             | IF LP expression RP block . elsif_list ELSE block

    ELSE   shift, and go to state 158
    ELSIF  shift, and go to state 159

    $default  reduce using rule 75 (if_statement)

    elsif_list  go to state 160
    elsif       go to state 161


state 144

   98 declaration_statement: type_specifier IDENTIFIER . SEMICOLON
   99                      | type_specifier IDENTIFIER . ASSIGN_T expression SEMICOLON

    SEMICOLON  shift, and go to state 105
    ASSIGN_T   shift, and go to state 106


state 145

  101 block: LC @1 statement_list RC .

    $default  reduce using rule 101 (block)


state 146

   18 statement_list: statement_list statement .

    $default  reduce using rule 18 (statement_list)


state 147

   94 try_statement: TRY block CATCH LP IDENTIFIER . RP block FINALLY block
   96              | TRY block CATCH LP IDENTIFIER . RP block

    RP  shift, and go to state 162


state 148

   12 function_definition: type_specifier IDENTIFIER LP RP SEMICOLON .

    $default  reduce using rule 12 (function_definition)


state 149

   10 function_definition: type_specifier IDENTIFIER LP RP block .

    $default  reduce using rule 10 (function_definition)


state 150

   13 parameter_list: type_specifier IDENTIFIER .

    $default  reduce using rule 13 (parameter_list)


state 151

    9 function_definition: type_specifier IDENTIFIER LP parameter_list RP . block
   11                    | type_specifier IDENTIFIER LP parameter_list RP . SEMICOLON

    LC         shift, and go to state 60
    SEMICOLON  shift, and go to state 163

    block  go to state 164


state 152

   14 parameter_list: parameter_list COMMA . type_specifier IDENTIFIER

    BOOLEAN_T  shift, and go to state 17
    INT_T      shift, and go to state 18
    DOUBLE_T   shift, and go to state 19
    STRING_T   shift, and go to state 20

    type_specifier  go to state 165


state 153

   99 declaration_statement: type_specifier IDENTIFIER ASSIGN_T expression SEMICOLON .

    $default  reduce using rule 99 (declaration_statement)


state 154

   16 argument_list: argument_list COMMA assignment_expression .

    $default  reduce using rule 16 (argument_list)


state 155

   84 while_statement: label_opt WHILE LP expression RP . block

    LC  shift, and go to state 60

    block  go to state 166


state 156

   85 for_statement: label_opt FOR LP expression_opt SEMICOLON . expression_opt SEMICOLON expression_opt RP block

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    REGEXP_LITERAL  shift, and go to state 4
    IDENTIFIER      shift, and go to state 50
    LP              shift, and go to state 10
    SUB             shift, and go to state 11
    TRUE_T          shift, and go to state 12
    FALSE_T         shift, and go to state 13
    EXCLAMATION     shift, and go to state 14

    $default  reduce using rule 87 (expression_opt)

    expression                 go to state 51
    assignment_expression      go to state 26
    logical_or_expression      go to state 27
    logical_and_expression     go to state 28
    equality_expression        go to state 29
    relational_expression      go to state 30
    additive_expression        go to state 31
    multiplicative_expression  go to state 32
    unary_expression           go to state 33
    postfix_expression         go to state 34
    primary_expression         go to state 35
    expression_opt             go to state 167


state 157

   86 foreach_statement: label_opt FOREACH LP IDENTIFIER COLON . expression RP block

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    REGEXP_LITERAL  shift, and go to state 4
    IDENTIFIER      shift, and go to state 50
    LP              shift, and go to state 10
    SUB             shift, and go to state 11
    TRUE_T          shift, and go to state 12
    FALSE_T         shift, and go to state 13
    EXCLAMATION     shift, and go to state 14

    expression                 go to state 168
    assignment_expression      go to state 26
    logical_or_expression      go to state 27
    logical_and_expression     go to state 28
    equality_expression        go to state 29
    relational_expression      go to state 30
    additive_expression        go to state 31
    multiplicative_expression  go to state 32
    unary_expression           go to state 33
    postfix_expression         go to state 34
    primary_expression         go to state 35


state 158

   76 if_statement: IF LP expression RP block ELSE . block

    LC  shift, and go to state 60

    block  go to state 169


state 159

   81 elsif: ELSIF . LP expression RP block

    LP  shift, and go to state 170


state 160

   77 if_statement: IF LP expression RP block elsif_list .
   78             | IF LP expression RP block elsif_list . ELSE block
   80 elsif_list: elsif_list . elsif

    ELSE   shift, and go to state 171
    ELSIF  shift, and go to state 159

    $default  reduce using rule 77 (if_statement)

    elsif  go to state 172


state 161

   79 elsif_list: elsif .

    $default  reduce using rule 79 (elsif_list)


state 162

   94 try_statement: TRY block CATCH LP IDENTIFIER RP . block FINALLY block
   96              | TRY block CATCH LP IDENTIFIER RP . block

    LC  shift, and go to state 60

    block  go to state 173


state 163

   11 function_definition: type_specifier IDENTIFIER LP parameter_list RP SEMICOLON .

    $default  reduce using rule 11 (function_definition)


state 164

    9 function_definition: type_specifier IDENTIFIER LP parameter_list RP block .

    $default  reduce using rule 9 (function_definition)


state 165

   14 parameter_list: parameter_list COMMA type_specifier . IDENTIFIER

    IDENTIFIER  shift, and go to state 174


state 166

   84 while_statement: label_opt WHILE LP expression RP block .

    $default  reduce using rule 84 (while_statement)


state 167

   85 for_statement: label_opt FOR LP expression_opt SEMICOLON expression_opt . SEMICOLON expression_opt RP block

    SEMICOLON  shift, and go to state 175


state 168

   20 expression: expression . COMMA assignment_expression
   86 foreach_statement: label_opt FOREACH LP IDENTIFIER COLON expression . RP block

    RP     shift, and go to state 176
    COMMA  shift, and go to state 67


state 169

   76 if_statement: IF LP expression RP block ELSE block .

    $default  reduce using rule 76 (if_statement)


state 170

   81 elsif: ELSIF LP . expression RP block

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    REGEXP_LITERAL  shift, and go to state 4
    IDENTIFIER      shift, and go to state 50
    LP              shift, and go to state 10
    SUB             shift, and go to state 11
    TRUE_T          shift, and go to state 12
    FALSE_T         shift, and go to state 13
    EXCLAMATION     shift, and go to state 14

    expression                 go to state 177
    assignment_expression      go to state 26
    logical_or_expression      go to state 27
    logical_and_expression     go to state 28
    equality_expression        go to state 29
    relational_expression      go to state 30
    additive_expression        go to state 31
    multiplicative_expression  go to state 32
    unary_expression           go to state 33
    postfix_expression         go to state 34
    primary_expression         go to state 35


state 171

   78 if_statement: IF LP expression RP block elsif_list ELSE . block

    LC  shift, and go to state 60

    block  go to state 178


state 172

   80 elsif_list: elsif_list elsif .

    $default  reduce using rule 80 (elsif_list)


state 173

   94 try_statement: TRY block CATCH LP IDENTIFIER RP block . FINALLY block
   96              | TRY block CATCH LP IDENTIFIER RP block .

    FINALLY  shift, and go to state 179

    $default  reduce using rule 96 (try_statement)


state 174

   14 parameter_list: parameter_list COMMA type_specifier IDENTIFIER .

    $default  reduce using rule 14 (parameter_list)


state 175

   85 for_statement: label_opt FOR LP expression_opt SEMICOLON expression_opt SEMICOLON . expression_opt RP block

    INT_LITERAL     shift, and go to state 1
    DOUBLE_LITERAL  shift, and go to state 2
    STRING_LITERAL  shift, and go to state 3
    REGEXP_LITERAL  shift, and go to state 4
    IDENTIFIER      shift, and go to state 50
    LP              shift, and go to state 10
    SUB             shift, and go to state 11
    TRUE_T          shift, and go to state 12
    FALSE_T         shift, and go to state 13
    EXCLAMATION     shift, and go to state 14

    $default  reduce using rule 87 (expression_opt)

    expression                 go to state 51
    assignment_expression      go to state 26
    logical_or_expression      go to state 27
    logical_and_expression     go to state 28
    equality_expression        go to state 29
    relational_expression      go to state 30
    additive_expression        go to state 31
    multiplicative_expression  go to state 32
    unary_expression           go to state 33
    postfix_expression         go to state 34
    primary_expression         go to state 35
    expression_opt             go to state 180


state 176

   86 foreach_statement: label_opt FOREACH LP IDENTIFIER COLON expression RP . block

    LC  shift, and go to state 60

    block  go to state 181


state 177

   20 expression: expression . COMMA assignment_expression
   81 elsif: ELSIF LP expression . RP block

    RP     shift, and go to state 182
    COMMA  shift, and go to state 67


state 178

   78 if_statement: IF LP expression RP block elsif_list ELSE block .

    $default  reduce using rule 78 (if_statement)


state 179

   94 try_statement: TRY block CATCH LP IDENTIFIER RP block FINALLY . block

    LC  shift, and go to state 60

    block  go to state 183


state 180

   85 for_statement: label_opt FOR LP expression_opt SEMICOLON expression_opt SEMICOLON expression_opt . RP block

    RP  shift, and go to state 184


state 181

   86 foreach_statement: label_opt FOREACH LP IDENTIFIER COLON expression RP block .

    $default  reduce using rule 86 (foreach_statement)


state 182

   81 elsif: ELSIF LP expression RP . block

    LC  shift, and go to state 60

    block  go to state 185


state 183

   94 try_statement: TRY block CATCH LP IDENTIFIER RP block FINALLY block .

    $default  reduce using rule 94 (try_statement)


state 184

   85 for_statement: label_opt FOR LP expression_opt SEMICOLON expression_opt SEMICOLON expression_opt RP . block

    LC  shift, and go to state 60

    block  go to state 186


state 185

   81 elsif: ELSIF LP expression RP block .

    $default  reduce using rule 81 (elsif)


state 186

   85 for_statement: label_opt FOR LP expression_opt SEMICOLON expression_opt SEMICOLON expression_opt RP block .

    $default  reduce using rule 85 (for_statement)
